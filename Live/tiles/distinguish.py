import numpy as np
from itertools import combinations

# Define the sets
arrays = {
    'I-bottom': [3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 1, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'I-center': [3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3],
    'I-left': [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 1, 1, 3, 3, 2, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 1, 1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3],
    'I-middle': [3, 2, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 3, 2, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 1, 2, 3, 3, 1, 2, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3],
    'I-right': [3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 1, 1, 3, 3, 1, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 2, 1, 1, 3, 3, 2, 1, 1, 1, 1, 2, 3, 3, 1, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'I-top': [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3],
    'J': [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 0, 0, 3, 1, 3, 3, 1, 3, 0, 0, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'L': [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'O': [3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'S': [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 3, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'T': [3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    'Z': [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3]
}

# Convert arrays to a list of lists and get their lengths
array_names = list(arrays.keys())
array_data = np.array(list(arrays.values()))
num_indices = array_data.shape[1]

# Function to find the smallest set of indices that uniquely identifies each set
def find_minimal_indices(arrays, num_indices):
    # Check combinations of indices starting from 1, 2, ...
    for r in range(1, num_indices + 1):
        for combo in combinations(range(num_indices), r):
            # Check if this combination of indices uniquely identifies each set
            unique_combos = {tuple(array[list(combo)]) for array in arrays}
            if len(unique_combos) == len(arrays):
                return combo
    return None

# Find minimal indices
minimal_indices = find_minimal_indices(array_data, num_indices)

# Print the result
print(f"The minimal indices to distinguish the sets are: {minimal_indices}")
