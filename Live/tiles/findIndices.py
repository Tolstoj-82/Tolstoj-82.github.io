import numpy as np

# Define the arrays
Ibottom = np.array([3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 1, 3, 2, 1, 1, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Icenter = np.array([3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3])
Ileft = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 1, 1, 3, 3, 2, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 1, 1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3])
Imiddle = np.array([3, 2, 1, 1, 2, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 3, 3, 2, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 1, 2, 3, 3, 1, 2, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3])
Iright = np.array([3, 2, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 2, 1, 1, 3, 3, 1, 2, 1, 1, 1, 2, 3, 3, 1, 1, 1, 2, 1, 1, 3, 3, 2, 1, 1, 1, 1, 2, 3, 3, 1, 1, 2, 1, 1, 1, 3, 3, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Itop = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 2, 1, 1, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3])
J = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 0, 0, 3, 1, 3, 3, 1, 3, 0, 0, 3, 1, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])
L = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])
O = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3])
S = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 0, 0, 3, 2, 3, 3, 2, 3, 0, 0, 3, 2, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])
T = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 0, 0, 0, 3, 1, 3, 3, 1, 0, 1, 1, 3, 1, 3, 3, 1, 0, 1, 1, 3, 1, 3, 3, 1, 0, 3, 3, 3, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])
Z = np.array([3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3])

# Define the output arrays
J_target = np.array([3, 1, 2, 3, 2])
O_target = np.array([3, 0, 1, 3, 1])
Z_target = np.array([3, 2, 2, 3, 2])
S_target = np.array([3, 1, 1, 3, 1])

# Function to find matching indices
def find_matching_indices():
    length = len(J_target)
    target_length = len(J_target)
    indices = []
    
    for i in range(length - target_length + 1):  # Adjust range to avoid out-of-bounds error
        if (J[i:i+target_length] == J_target).all() and \
           (O[i:i+target_length] == O_target).all() and \
           (Z[i:i+target_length] == Z_target).all() and \
           (S[i:i+target_length] == S_target).all():
            indices.append(i)
    
    return indices

# Find and print matching indices
matching_indices = find_matching_indices()
print("Matching indices:", matching_indices)
